#!/bb/sh
# (c) Robert Shingledecker 2012
# Contributions by Jason Williams
. /etc/init.d/tc-functions

useBusybox

sudo chown "$TCUSER":staff /tmp
sudo chmod 1777 /tmp
TCUSER=`cat /etc/sysconfig/tcuser`
TCEDIR=`readlink /etc/sysconfig/tcedir`
SCEBOOTLST=""$TCEDIR"/sceboot.lst"
checknotroot
BUILD=`getBuild`
HERE=`pwd`


if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	echo "${YELLOW}sce-import - search, convert, install DEB and pre-built packages as local SCEs,"
        echo "             use simple package name (example emelfm not emelfm.tar.gz, nano"
        echo "             not nano_2.2.6-3_i386.deb), may use some option combinations"
        echo "             (example sce-import -zbrs nano).${NORMAL}"
	echo
	echo "${YELLOW}'"sce-import"'${NORMAL}             prompt to enter starting characters of package sought."
	echo "${YELLOW}'"sce-import PKG"'${NORMAL}         search packages that start with desired package name."
	echo "${YELLOW}'"sce-import -c PKG"'${NORMAL}      search packages that contain desired package name."
	echo "${YELLOW}'"sce-import -l FILENAME"'${NORMAL} create an SCE mega-extension, use a plain text file"
        echo "                         that lists one package per line (example 'sce-import -l"
        echo "                         /tmp/my_apps', file my_apps contains emelfm and nano)."
	echo "${YELLOW}'"sce-import -b"'${NORMAL}          add resulting SCE to sceboot.lst."
	echo "${YELLOW}'"sce-import -r"'${NORMAL}          use RAM for unpacking source DEBs."
	echo "${YELLOW}'"sce-import -s"'${NORMAL}          list sizes of packages to be fetched and installed."
	echo "${YELLOW}'"sce-import -d"'${NORMAL}          use existing SCE(s) as dependencies"
	echo "${YELLOW}'"sce-import -o"'${NORMAL}          add resulting SCE to ondemand."
	echo "${YELLOW}'"sce-import -n"'${NORMAL}          non-interactive mode."
	echo "${YELLOW}'"sce-import -u"'${NORMAL}          (DEFAULT) update mode, sync new debinx files."
	echo "${YELLOW}'"sce-import -p"'${NORMAL}          use existing debinx, no new fetch, better performance."
	echo "${YELLOW}'"sce-import -v"'${NORMAL}          see listed of packages the imported SCE contains."
	echo "${YELLOW}'"sce-import -z"'${NORMAL}          use only CLI options, ignore etc/sysconfig/sceconfig."
	echo "${YELLOW}'"sce-import -R"'${NORMAL}          include recommended Debian packages, warning large SCE."
	echo "${YELLOW}'"sce-import -S"'${NORMAL}          include suggested Debian packages, warning large SCE."
exit 1
fi

mksce() {
	if [ "$FLAGS" ]
	then
		sudo deb2sce "$FLAGS" "$1" 
		if [ "$?" != "0" ]; then
			exit 1
		fi      
	else
		sudo deb2sce "$1"  
		if [ "$?" != "0" ]; then
			exit 1
		fi           
	fi

}

exit_tcnet() {
	echo "There is an issue connecting to `cat /opt/tcemirror`, exiting.."
	exit 1
}
[ -d /tmp/work ] && sudo rm -f /tmp/work/* > /dev/null 2>&1
[ -f /tmp/.viewpkgs ] && sudo rm /tmp/.viewpkgs
[ -f /tmp/.importinteractive ] && sudo rm /tmp/.importinteractive
[ -f /tmp/.keepdoc ] && sudo rm /tmp/.keepdoc
[ -f /tmp/.importram ] && sudo rm /tmp/.importram
[ -f /tmp/.importsize ] && sudo rm /tmp/.importsize
[ -f /tmp/.pkgprebuilt ] && sudo rm /tmp/.pkgprebuilt
[ -f /tmp/.depfile ] && sudo rm /tmp/.depfile
[ -f /tmp/.pkgextrafiles ] && sudo rm /tmp/.pkgextrafiles
[ -f /tmp/select.ans ] && sudo rm /tmp/select.ans   
[ -f /tmp/.targetfile ] && sudo rm /tmp/.targetfile
[ -f /tmp/.extrarepodep ] && sudo rm /tmp/.extrarepodep
[ -f /tmp/.importdep ] && sudo rm /tmp/.importdep
[ -f /tmp/.importfree ] && sudo rm /tmp/.importfree
[ -f /tmp/.scedeps ] && sudo rm /tmp/.scedeps
[ -f /tmp/.scedebs ] && sudo rm /tmp/.scedebs
[ -f /tmp/.scelist ] && sudo rm /tmp/.scelist
[ -f /tmp/deb2sce.tar.gz ] && sudo rm /tmp/deb2sce.tar.gz
[ -f /tmp/.prebuiltmd5sumlist ] && sudo rm /tmp/.prebuiltmd5sumlist
[ -f /tmp/.pkgextrafilemd5sumlist ] && sudo rm /tmp/.pkgextrafilemd5sumlist
[ -f /tmp/.blocked ] && sudo rm /tmp/.blocked
[ -f /tmp/.pkglisterror ] && sudo rm /tmp/.pkglisterror
[ -f /tmp/.pkgdeperror ] && sudo rm /tmp/.pkgdeperror
[ -f /tmp/.nogetdeps ] && sudo rm /tmp/.nogetdeps
[ -f /tmp/sce.recommends ] && sudo rm /tmp/sce.recommends
[ -f /tmp/sce.suggests ] && sudo rm /tmp/sce.suggests
[ -f /tmp/.recommends ] && sudo rm /tmp/.recommends
[ -f /tmp/.suggests ] && sudo rm /tmp/.suggests


read IMPORTMIRROR < /opt/tcemirror
PREBUILTMIRROR="${IMPORTMIRROR%/}/dCore/"$BUILD"/import"
IMPORTMIRROR="${IMPORTMIRROR%/}/dCore/import"


unset FLAGS PACKAGELIST NOPGREP
while getopts drsbolknupcvzRS OPTION
do
	case ${OPTION} in
		c) CHECKALL=TRUE ;;
		u) UPDATEDEBINXMODE=TRUE ;;
		p) PRESERVEDEBINXMODE=TRUE ;;
		n) NONINTERACTIVE=TRUE ;;
		k) KEEPDOC=TRUE ;;
		d) DEPS=TRUE ;;
		r) RAM=TRUE ;;
		s) SIZE=TRUE ;;
		b) FLAGS="$FLAGS"b ; ONBOOT=TRUE ;;
		o) FLAGS="$FLAGS"o ; ONDEMAND=TRUE ;;
		l) PACKAGELIST=TRUE ;;
		v) VIEWPKGS=TRUE ;;
		z) NOCONFIG=TRUE ;;
		R) RECOMMENDS=TRUE ;;
		S) SUGGESTS=TRUE ;;
		*) echo "Run  sce-import --help  for usage information."
                   exit 1 ;;
	esac
done

if grep -i "^ONBOOT=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	ONBOOT=TRUE
	FLAGS="$FLAGS"b
fi

if grep -i "^ONDEMAND=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	ONDEMAND=TRUE
	FLAGS="$FLAGS"o
fi

shift `expr $OPTIND - 1`

[ "$FLAGS" ] && FLAGS="-$FLAGS"
TARGET="$1"

# Strip .sce suffix of package and preceding directory 
# and preceding directory if specified on command line.
TARGET=`basename "$TARGET"`
TARGET=${TARGET%%.sce}
cd /tmp

wget -O deb2sce.tar.gz -cq "$PREBUILTMIRROR"/deb2sce.tar.gz 2>/dev/null ||  exit_tcnet

tar xvf /tmp/deb2sce.tar.gz PKGEXTRAREPODEP >/dev/null 2>&1
[ -f /tmp/PKGEXCLUDELIST ] || tar xvf /tmp/deb2sce.tar.gz PKGEXCLUDELIST >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGADDDEP >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGEXTRAFILES >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGPREBUILTDEP >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGEXTRAFILEMD5SUMLIST >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGDATAFILEMD5SUMLIST >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PREBUILTMD5SUMLIST >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz KEEPDOC >/dev/null 2>&1
cd "$HERE"

# Determine if debinx is desired to be updated in this session.
if grep -i "^PRESERVEDEBINXMODE=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	PRESERVEDEBINXMODE=TRUE
	echo "Using the -p option."
else
	echo "Using the -u option."
fi



if [ "$PRESERVEDEBINXMODE" != "TRUE" ]; then
	sudo debGetEnv "$2"
	if [ "$?" != "0" ]; then
		echo "Error in updating DEBINX files.  Exiting..."
	fi
else
	[ -s /tmp/debinx ] || sudo debGetEnv "$2"
	if [ "$?" != "0" ]; then
		echo "Error in updating DEBINX files.  Exiting..."
	fi
fi

read DEBINX < /tmp/debinx
DEBINX="/etc/sysconfig/tcedir/import/debinx/$DEBINX"

# Intermal flag to use /tmp/work provided by sce-update.
if [ "$NOGETDEPS" == "TRUE" ]; then
	touch /tmp/.nogetdeps
	echo "Using the -y option."
fi

# Determine if non-interactive mode is being used.
if grep -i "^NONINTERACTIVE=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.importinteractive
	echo "Using the -n option."
elif [ "$NONINTERACTIVE" == "TRUE" ]; then
	touch /tmp/.importinteractive
	echo "Using the -n option."
fi

if grep -wq "^$TARGET$" /tmp/PKGEXCLUDELIST > /dev/null 2>&1; then
	echo " "
	echo "$TARGET is a blocked package.  Exiting.."
	echo " "
	exit 0
fi

# Determine if the size option is being used.
if grep -i "^SIZE=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.importsize
	echo "Using the -s option."
elif [ "$SIZE" == "TRUE" ]; then
	touch /tmp/.importsize
	echo "Using the -s option."
fi

# Determine if the viewpackges option is being used.
if grep -i "^VIEWPKGS=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.viewpkgs
	echo "Using the -v option."
elif [ "$VIEWPKGS" == "TRUE" ]; then
	touch /tmp/.viewpkgs
	echo "Using the -v option."
fi

# Determine if the checkall option is being used.
if grep -i "^CHECKALL=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	export CHECKALL=TRUE
	echo "Using the -c option."
elif [ "$CHECKALL" == "TRUE" ]; then
	echo "Using the -c option."
fi

# Determine if RAM is going to be used for unpacking.
if grep -i "^RAM=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.importram
	echo "Using the -r option."
elif [ "$RAM" == "TRUE" ]; then
	touch /tmp/.importram
	echo "Using the -r option."
fi

# Determine if docs are to be kept (/usr/share/doc, /usr/share/man, etc).
if grep -i "^KEEPDOC=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.keepdoc
	echo "Using the -k option."
elif [ "$KEEPDOC" == "TRUE" ]; then
	touch /tmp/.keepdoc
	echo "Using the -k option."
fi

# Determine if including 'Recommended' packages are desired.
if grep -i "^RECOMMENDS=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.recommends
	echo "Using the -R option."
elif [ "$RECOMMENDS" == "TRUE" ]; then
	touch /tmp/.recommends
	echo "Using the -R option."
fi

# Determine if including 'Suggested' packages are desired.
if grep -i "^SUGGESTS=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	touch /tmp/.suggests
	echo "Using the -S option."
elif [ "$SUGGESTS" == "TRUE" ]; then
	touch /tmp/.suggests
	echo "Using the -S option."
fi


checklist() {
  if sudo grep -q "^$1:" /tmp/PKGADDDEP; then
	:
  elif sudo grep "^$1:" /tmp/PKGPREBUILTDEP > /dev/null 2>&1; then
	:
  elif sudo grep "^Package: $1$" "$TCEDIR"/import/debinx/debinx.* > /dev/null 2>&1; then
	:
  elif sudo grep -q "^Package: $1$" "$DEBINX" > /dev/null 2>&1; then
	:
  else
	echo "$1" >> /tmp/.pkglisterror
  fi
}



# Determine if .lst file is being used or list specified, copy to /tmp/.targetfile
if [ "$PACKAGELIST" == "TRUE" ] || [ -f "$TCEDIR"/sce/"$1".sce.lst ]; then
	if [ -f "$1" ] && [ "$PACKAGELIST" == "TRUE" ]; then
		TARGETFILE=`readlink -f "$1"`
		for I in `cat "$TARGETFILE"`; do
			checklist "$I"
		done
		if [ -s /tmp/.pkglisterror ]; then
			echo " "
			cat /tmp/.pkglisterror
			echo " "
			if [ ! -f /tmp/.importinteractive ]; then
				echo "The above files in "$TARGETFILE" do not exist in dCore repos."
				echo -n "Do you want to proceed anyway? (y/N):"
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					:
				else
					exit 1
				fi
			else
				echo "The above files in "$TARGETFILE" do not exist in dCore repos."
			fi
		fi
		sudo cp $TARGETFILE /tmp/.targetfile
		TARGET=`basename $1 .sce.lst`
	elif [ -s "$TCEDIR"/sce/"$1".sce.lst ]; then
		echo "Existing list file found."
		TARGETFILE=""$TCEDIR"/sce/"$1".sce.lst"
		for I in `cat "$TARGETFILE"`; do
			checklist "$I"
		done
		if [ -s /tmp/.pkglisterror ]; then
			echo " "
			cat /tmp/.pkglisterror
			echo " "
			if [ ! -f /tmp/.importinteractive ]; then
				echo "The above files in "$TARGETFILE" do not exist in dCore repos."
				echo -n "Do you want to proceed anyway? (y/N):"
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					:
				else
					exit 1
				fi
			else
				echo "The above files in "$TARGETFILE" do not exist in dCore repos."
			fi
		fi
		sudo cp "$TCEDIR"/sce/"$1".sce.lst /tmp/.targetfile
	else
		echo "Neither a file named "$1" nor does "$TCEDIR"/sce/"$1".sce.lst exist."
		echo "Exiting.."
		exit 0
	fi
fi



# Determine if the -d option or the existence of a dep file
# is present and use dep file if found.
if [ "$DEPS" == "TRUE" ]; then
	touch /tmp/.importdep
	echo "Using the -d option."
elif ls /etc/sysconfig/tcedir/sce/"$TARGET".sce.dep > /dev/null 2>&1; then
	touch /tmp/.importdep
	echo "Existing dep file found."
fi




# Check for MS Windows filesystem of TCEDIR, and only continue of RAM 
# is being used for unpacking.
MS_MNTS=`mount|awk '$5~/fat|vfat|msdos|ntfs/{printf "%s ",$1}'`
REALDIR=`readlink /etc/sysconfig/tcedir`
MNTDEV=`df "$REALDIR" | tail -n1 | cut -f1 -d" "`
case "$MS_MNTS" in 
			*"$MNTDEV"* )
				if [ ! -f /tmp/.importram ]; then 
					echo "WARNING: "$REALDIR" resides on a Windows filesystem."
					echo "Please try again with the -r flag to unpack files in RAM."
					exit 1
				fi	
			;;

esac

echo " "

# When no package is specified on command line, ask for one.
if [ -z "$TARGET" ]
then
	echo -n "Enter starting characters of package sought: "
	read TARGET
fi

[ -n "$TARGET" ] || exit 1

# Below is where the package is found either in prebuilt, main
# Packages file, or in extra repos.  And then proceeds to deb2sce.


# Below is where -l list file option is being used.
if [ "$PACKAGELIST" ] && [ ! -f "$TCEDIR"/sce/"$1".sce.lst ]; then
	if [ -f "$TARGETFILE" ]; then
  		echo " "
  		if [ -f /tmp/.importinteractive ]; then
  			echo -n "Creating "$TARGET".sce from package list "$TARGETFILE""
  			mksce "$TARGET"
  		else
                        echo "Do you want to create "$TARGET".sce from package list "$TARGETFILE"?"
                        echo "Press (n/N) to import a standard "$TARGET" package if it exists,"
                        echo "any key will use the existing package list."
                        echo
                        echo "WARNING: Pressing (n/N) will delete "$TARGETFILE" now."
                        read ans                  
	  		if [ "$ans" == "n" ] || [ "$ans" == "N" ]; then  
	  			sudo rm /tmp/.targetfile
				mksce "$TARGET" 
				sudo rm "$TARGETFILE"
			else
				mksce "$TARGET" 
			fi
		fi
	else 
		echo "Please specify a target file when using the -l option.  Exiting.."
		exit 1
	fi  
# Below is where an existing .lst file is found in sce dir.
elif [ -f "$TCEDIR"/sce/"$1".sce.lst ]; then
	echo " "
  	if [ -f /tmp/.importinteractive ]; then
  		echo -n "Creating "$TARGET".sce from package list "$TARGETFILE""
  		mksce "$TARGET"
  	else
	  	echo "Do you want to create "$TARGET".sce from package list "$TARGETFILE"?"
                echo "Press (n/N) to import a standard "$TARGET" package if it exists,"
                echo "any key will use the existing package list."
                echo
                echo "WARNING: Pressing (n/N) will delete "$TARGETFILE" now."
                read ans                  
	  	if [ "$ans" == "n" ] || [ "$ans" == "N" ]; then  
	  		sudo rm /tmp/.targetfile
			mksce "$TARGET" 
			sudo rm "$TARGETFILE"
		else
			mksce "$TARGET" 
		fi
	fi  
# Below checks for package in the extra repos first, then the 
# Debian main repos, then in the prebuilt section, in that order.
elif [ "$CHECKALL" == "TRUE" ]; then
 if sudo grep -i "^Package: .*$TARGET" "$TCEDIR"/import/debinx/debinx* > /dev/null 2>&1 ||  sudo grep -i "^Package: .*$TARGET" "$DEBINX" > /dev/null 2>&1 || sudo grep -i "$TARGET" /tmp/PKGADDDEP | cut -f1 -d: | grep -i "$TARGET" > /dev/null 2>&1 || sudo grep -i "$TARGET" /tmp/PKGPREBUILTDEP | cut -f1 -d: | grep -i "$TARGET" > /dev/null 2>&1; then
  if [ -f /tmp/.importinteractive ]; then
	if sudo grep -i "^Package: .*$TARGET$" "$TCEDIR"/import/debinx/debinx* > /dev/null 2>&1; then
		DEB=`sudo grep -i "^Package: $TARGET$" "$TCEDIR"/import/debinx/debinx* | head -1 | awk '{print $2}'`
	elif sudo grep -i "^Package: .*$TARGET$" "$DEBINX" > /dev/null 2>&1; then
		DEB=`sudo grep -i "^Package: $TARGET$" "$DEBINX" | awk '{print $2}'`
	elif sudo grep -i "^$TARGET:" /tmp/PKGADDDEP > /dev/null 2>&1; then
		DEB=`sudo grep -i "^$TARGET:" /tmp/PKGADDDEP | cut -f1 -d:`
	elif sudo grep -i "^$TARGET:" /tmp/PKGPREBUILTDEP  > /dev/null 2>&1; then
		DEB=`sudo grep -i "^$TARGET:" /tmp/PKGPREBUILTDEP | cut -f1 -d:`
	fi
	if [ -z "$DEB" ]; then
		{ sudo grep -i "^Package: .*$TARGET" "$TCEDIR"/import/debinx/debinx*  | awk '{print $2}' ; sudo grep -i "^Package: .*$TARGET" "$DEBINX" | awk '{print $2}' ; sudo grep -i "$TARGET" /tmp/PKGADDDEP | cut -f1 -d: | grep "$TARGET" ; sudo grep -i "$TARGET" /tmp/PKGPREBUILTDEP | cut -f1 -d: | grep -i "$TARGET" ; } | sort | uniq | select "Select Package for $1" "-"
  		read DEB < /tmp/select.ans                                                                           
  		[ "$DEB" == "q" ] && exit 1
	fi     
  else
	{ ls "$TCEDIR"/import/debinx/debinx* > /dev/null 2>&1 && sudo grep -i "^Package: .*$TARGET" "$TCEDIR"/import/debinx/debinx* | head -1 | awk '{print $2}' ; sudo grep -i "^Package: .*$TARGET" "$DEBINX" | awk '{print $2}' ; sudo grep -i "$TARGET" /tmp/PKGADDDEP | cut -f1 -d: | grep "$TARGET" ; sudo grep -i "$TARGET" /tmp/PKGPREBUILTDEP | cut -f1 -d: | grep -i "$TARGET" ; } | sort | uniq | select "Select Package for $1" "-"
  	read DEB < /tmp/select.ans                                                                           
  	[ "$DEB" == "q" ] && exit 1     
  fi 

  echo " "   
#  if [ -f /tmp/.importinteractive ]; then
#	echo "Importing $DEB."
#	mksce "$DEB"
#  else                                                               
#  	echo -n "Do you want to import $DEB? (y/N): "                        
#  	read ans                                                             
#  	[ "$ans" == "y" ] || exit 1                                           
#  	mksce "$DEB"
# fi
  echo "Importing $DEB."
  mksce "$DEB"
fi  
elif [ "$CHECKALL" != "TRUE" ]; then   
 if sudo grep -i "^Package: $TARGET" "$TCEDIR"/import/debinx/debinx* > /dev/null 2>&1 ||  sudo grep -i "^Package: $TARGET" "$DEBINX" > /dev/null 2>&1 || sudo grep -i "$TARGET" /tmp/PKGADDDEP | cut -f1 -d: | grep -i "$TARGET" > /dev/null 2>&1 || sudo grep -i "$TARGET" /tmp/PKGPREBUILTDEP | cut -f1 -d: | grep -i "$TARGET" > /dev/null 2>&1; then
  if [ -f /tmp/.importinteractive ]; then
	if sudo grep -i "^Package: $TARGET$" "$TCEDIR"/import/debinx/debinx* > /dev/null 2>&1; then
		DEB=`sudo grep -i "^Package: $TARGET$" "$TCEDIR"/import/debinx/debinx* | head -1 | awk '{print $2}'`
	elif sudo grep -i "^Package: $TARGET$" "$DEBINX" > /dev/null 2>&1; then
		DEB=`sudo grep -i "^Package: $TARGET$" "$DEBINX" | awk '{print $2}'`
	elif sudo grep -i "^$TARGET:" /tmp/PKGADDDEP > /dev/null 2>&1; then
		DEB=`sudo grep -i "^$TARGET:" /tmp/PKGADDDEP | cut -f1 -d:`
	elif sudo grep -i "^$TARGET:" /tmp/PKGPREBUILTDEP  > /dev/null 2>&1; then
		DEB=`sudo grep -i "^$TARGET:" /tmp/PKGPREBUILTDEP | cut -f1 -d:`
	fi
	if [ -z "$DEB" ]; then
		{ sudo grep -i "^Package: $TARGET" "$TCEDIR"/import/debinx/debinx*  | awk '{print $2}' ; sudo grep -i "^Package: $TARGET" "$DEBINX" | awk '{print $2}' ; sudo grep -i "$TARGET" /tmp/PKGADDDEP | cut -f1 -d: | grep "$TARGET" ; sudo grep -i "$TARGET" /tmp/PKGPREBUILTDEP | cut -f1 -d: | grep -i "$TARGET" ; } | sort | uniq | select "Select Package for $1" "-"
  		read DEB < /tmp/select.ans                                                                           
  		[ "$DEB" == "q" ] && exit 1
	fi     
  else
	{ ls "$TCEDIR"/import/debinx/debinx* > /dev/null 2>&1 && sudo grep -i "^Package: $TARGET" "$TCEDIR"/import/debinx/debinx* | head -1 | awk '{print $2}' ; sudo grep -i "^Package: $TARGET" "$DEBINX" | awk '{print $2}' ; sudo grep -i "$TARGET" /tmp/PKGADDDEP | cut -f1 -d: | grep "$TARGET" ; sudo grep -i "$TARGET" /tmp/PKGPREBUILTDEP | cut -f1 -d: | grep -i "$TARGET" ; } | sort | uniq | select "Select Package for $1" "-"
  	read DEB < /tmp/select.ans                                                                           
  	[ "$DEB" == "q" ] && exit 1     
  fi 
  echo " "   
#  if [ -f /tmp/.importinteractive ]; then
#	echo "Importing $DEB."
#	mksce "$DEB"
#  else                                                               
#  	echo -n "Do you want to import $DEB? (y/N): "                        
#  	read ans                                                             
#  	[ "$ans" == "y" ] || exit 1                                           
#  	mksce "$DEB"
# fi
  echo "Importing $DEB."
  mksce "$DEB"
fi                                        
else
 echo ""$TARGET" is not available as a package.  Exiting..."
 exit 1
fi


