#!/bin/sh
# (c) Jason Williams 2014
# Tool to update SCE extensions in bulk.

. /etc/init.d/tc-functions
checknotroot
SCEDIR="/etc/sysconfig/tcedir/sce"
BUILD=`getBuild`
unset DEPLIST

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        echo
	echo "${YELLOW}sce-update - check and update all or individual SCE(s),"
        echo "             may use some option combinations.${NORMAL}"
	echo
	echo "Usage:"
	echo
	echo "${YELLOW}'"sce-update"'${NORMAL}         menu prompt, choose SCE(s) to check, update if required."
       	echo "${YELLOW}'"sce-update SCE"'${NORMAL}     check specific SCE for update, update if required."
	echo "${YELLOW}'"sce-update -a"'${NORMAL}      check all SCEs for updates, both loaded and unloaded,"
        echo "                     update if required."
	echo "${YELLOW}'"sce-update -n SCE"'${NORMAL}  non-interactive mode, check specific SCE for updates,"
	echo "                     update if required."
	echo "${YELLOW}'"sce-update -c"'${NORMAL}      menu prompt, check selected SCE(s) for updates only,"
        echo "                     no actual updates performed."
	echo "${YELLOW}'"sce-update -r"'${NORMAL}      sce-import unpacks files in RAM during update."
	echo "${YELLOW}'"sce-update -s"'${NORMAL}      sce-import checks for size, available space during update."
	echo "${YELLOW}'"sce-update -z"'${NORMAL}      ignore /etc/sysconfig/sceconfig, use only current"
        echo "                     command line options."
	echo
	exit 0
fi

while getopts canrsz OPTION
do
	case ${OPTION} in
		r) RAM=TRUE ;;
		n) NONINTERACTIVE=TRUE ;;
		c) CHECKONLY=TRUE ;;
		a) UPDATEALL=TRUE ;;
		s) SIZE=TRUE ;;
		z) NOCONFIG=TRUE ;;
                *) echo "Run  sce-update --help  for usage information."
                   exit 1 ;;
	esac
done

# Determine if non-interactive mode is being used.
if grep -i "^NONINTERACTIVE=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	NONINTERACTIVE=TRUE
fi

shift `expr $OPTIND - 1`
UPDATETARGET="$1"
OPTIONS=""
if [ "$RAM" == "TRUE" ]; then
	OPTIONS=""$OPTIONS"r"
fi

if [ "$SIZE" == "TRUE" ]; then
	OPTIONS=""$OPTIONS"s"
fi

if [ -z "$1" ]; then
	SELECT=TRUE
fi

if [ -n "$2" ]; then
     echo "Warning: only one SCE per sce-update session can be entered in command line."
     echo "Run 'sce-update' to check more than one SCE per session."
     exit 1
fi

[ -d /tmp/work ] && sudo rm -r /tmp/work
[ -f /tmp/.sceupdatechoose ] && sudo rm /tmp/.sceupdatechoose
[ -f /tmp/.scelistchoose ] && sudo rm /tmp/.scelistchoose
[ -f /tmp/.sceupdateall ] && sudo rm /tmp/.sceupdateall
[ -f /tmp/.sceupdatelist ] && sudo rm /tmp/.sceupdatelist
[ -f /tmp/select.ans ] && sudo rm /tmp/select.ans
[ -f /tmp/.importupdates ] && sudo rm /tmp/.importupdates
[ -f /tmp/updateavailable ] && sudo rm /tmp/updateavailable
[ -f /tmp/importupdated ] && sudo rm /tmp/importupdated
[ -f /tmp/.importpkgtype ] && sudo rm /tmp/.importpkgtype
[ -f /tmp/.updatechecked ] && sudo rm /tmp/.updatechecked

cleanup() {
[ -f /tmp/.sceupdatechoose ] && sudo rm /tmp/.sceupdatechoose
[ -f /tmp/.scelistchoose ] && sudo rm /tmp/.scelistchoose
[ -f /tmp/.sceupdateall ] && sudo rm /tmp/.sceupdateall
[ -f /tmp/.sceupdatelist ] && sudo rm /tmp/.sceupdatelist
[ -f /tmp/select.ans ] && sudo rm /tmp/select.ans
[ -f /tmp/.importupdates ] && sudo rm /tmp/.importupdates
[ -f /tmp/importupdates ] && sudo rm /tmp/importupdates
[ -f /tmp/ssupdates ] && sudo rm /tmp/ssupdates
ls /tmp/*.md5sum > /dev/null 2>&1 && sudo rm /tmp/*.md5sum
[ -f /tmp/.importpkgtype ] && sudo rm /tmp/.importpkgtype
[ -f /tmp/.prebuiltmd5sumlist ] && sudo rm /tmp/.prebuiltmd5sumlist
[ -f /tmp/.pkgextrafilemd5sumlist ] && sudo rm /tmp/.pkgextrafilemd5sumlist
[ -f /tmp/.pkgprebuilt ] && sudo rm /tmp/.pkgprebuilt
[ -f /tmp/.updatechecked ] && sudo rm /tmp/.updatechecked
[ -d /tmp/work ] && sudo rm -r /tmp/work
sudo rm /tmp/*suggested > /dev/null 2>&1
sudo rm /tmp*recommended > /dev/null 2>&1
}

cd /etc/sysconfig/tcedir/sce

exit_tcnet() {
	echo "There is an issue connecting to `cat /opt/tcemirror`, exiting.."
	exit 1
}


read IMPORTMIRROR < /opt/tcemirror
PREBUILTMIRROR="${IMPORTMIRROR%/}/dCore/"$BUILD"/import"
IMPORTMIRROR="${IMPORTMIRROR%/}/dCore/import"

sudo debGetEnv "$2"
if [ "$?" != "0" ]; then
	echo "Error in updating needed DEBINX files, exiting.."
	exit 1
fi
read DEBINX < /tmp/debinx

cd "$SCEDIR"

## Get recursive list of dependency SCEs.
getDeps() {
DEPLIST=" $1 $DEPLIST "

if [ -f "$SCEDIR"/"$1".sce.dep ]; then
	for E in `cat "$SCEDIR"/"$1".sce.dep`; do
		H=" $E "
		if echo "$DEPLIST" | grep "$H" > /dev/null 2>&1; then
			continue
		else
			getDeps "$E"
		fi
	done
fi
}
##

if [ "$UPDATEALL" == "TRUE" ]; then
	
##### OLDDEBINX, NEWDEBINX
#####
	cd /etc/sysconfig/tcedir/import/debinx
	if [ -f OLDDEBINX ]; then
		MDOLD=`md5sum OLDDEBINX | cut -f1 -d" "`
	else
		MDOLD="0"
	fi
	MDNEW=`md5sum NEWDEBINX | cut -f1 -d" "`
	if [ "$MDOLD" == "$MDNEW" ]; then
		echo " "
		echo "Your entire SCE directory is up to date."
		sudo rm NEWDEBINX
		exit 0
	elif [ -f OLDDEBINX ]; then
		echo " "
		echo "Obtaining diff of new and old package data, this may take time.."
		sudo diff OLDDEBINX NEWDEBINX > /tmp/debinx.diff
		echo " "
		echo -n "Press Enter to proceed with update(s), y to see DEBINX diff, Ctrl-C aborts: "
		read ans
		if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
			less /tmp/debinx.diff
			echo -n "Do you wish to proceed with updates, enter (y)es or (n)o: "
			read ans
			if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
				:
			else
				echo "Exiting.."
				exit 0
			fi
		fi
	fi
	

##### /OLDDEBINX, NEWDEBINX
#####	

	cd "$SCEDIR"
	echo " "
	echo "Searching for available updates for all existing SCEs."
	echo " "
	## Get list of SCEs to be updated, should be all.
	for I in `ls *.sce | sed 's:.sce$::' | sort`; do
		if [ -f update/"$I".sce.debinx ]; then
			MDNEW=`md5sum /etc/sysconfig/tcedir/import/debinx/NEWDEBINX | cut -f1 -d" "`
			MDOLD=`cat update/"$I".sce.debinx`
			if [ "$MDOLD" == "$MDNEW" ]; then
				echo " "
				echo ""$I" is up to date."
				continue
			
			else
				echo
			fi
		elif [ -f "$I".sce.debinx ]; then
			MDNEW=`md5sum /etc/sysconfig/tcedir/import/debinx/NEWDEBINX | cut -f1 -d" "`
			MDOLD=`cat "$I".sce.debinx`
			if [ "$MDOLD" == "$MDNEW" ]; then
				echo " "
				echo ""$I" is up to date."
				continue
			else
				echo
			fi
		fi
		echo
		echo "Checkup $I for updates.."
		importupdatecheck "$I" > /dev/null 2>&1
	done
	if [ -s /tmp/.sceupdatelist ]; then
		if [ "$CHECKONLY" != "TRUE" ]; then
			if [ "$NONINTERACTIVE" == "TRUE" ]; then
				for I in `cat /tmp/.sceupdatelist`; do
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I", exiting.."
						#	exit 1
						#fi
					fi
					echo "$I" >> /tmp/importupdated
				done
			else
				echo " "
				cat  /tmp/.sceupdatelist | sort | uniq
				echo " "
                                echo -n "Press Enter to update above SCE(s), y to view package updates, Ctrl-C aborts: "
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
				for I in `cat /tmp/.sceupdatelist`; do
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I", exiting.."
						#	exit 1
						#fi
					fi
					echo "$I" >> /tmp/importupdated
				done
			fi
		else
			echo " "
			cat  /tmp/.sceupdatelist | sort | uniq
                        echo -n "The above SCE(s) need to be updated, enter y to view updates, Ctrl-C aborts: "
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
		fi
	else
		echo " "
		echo "No updates available for main or dependency SCEs."
	fi
	cd /etc/sysconfig/tcedir/import/debinx
	sudo cp NEWDEBINX OLDDEBINX > /dev/null 2>&1
	##
elif [ -f update/"$UPDATETARGET".sce ]; then
	if [ -f "$UPDATETARGET".sce.debinx ]; then
		MDNEW=`md5sum /etc/sysconfig/tcedir/import/debinx/NEWDEBINX | cut -f1 -d" "`
		MDOLD=`cat "$UPDATETARGET".sce.debinx`
		if [ "$MDOLD" == "$MDNEW" ]; then
			echo " "
			echo ""$UPDATETARGET".sce is up to date."
			exit 0
		fi
	fi
	cd update/
	echo " "
	echo "Searching for available updates for "$UPDATETARGET".sce."
	echo " "
	unset DEPLIST
	getDeps "$UPDATETARGET"
	for I in `echo "$DEPLIST"`; do
		if grep "^$I$" /tmp/.updatechecked > /dev/null 2>&1; then
			:
		else
			echo " "
			echo "Checkup $I for updates.."
			echo " "
			importupdatecheck "$I" > /dev/null 2>&1
		fi
	done
	if [ -s /tmp/.sceupdatelist ]; then
		if [ "$CHECKONLY" != "TRUE" ]; then
			if [ "$NONINTERACTIVE" == "TRUE" ]; then
				for I in `cat /tmp/.sceupdatelist`; do
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I", exiting.."
						#	exit 1
						#fi
					fi
					echo "$I" >> /tmp/importupdated
				done
			else
				echo " "
				cat  /tmp/.sceupdatelist | sort | uniq
				echo " "
                                echo -n "Press Enter to update above SCE(s), y to view package updates, Ctrl-C aborts: "
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
				for I in `cat /tmp/.sceupdatelist`; do
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I", exiting.."
						#	exit 1
						#fi
					fi
					echo "$I" >> /tmp/importupdated
				done
			fi
		else
			echo " "
			cat  /tmp/.sceupdatelist | sort | uniq
			echo -n "The above SCE(s) need to be updated, enter y to view updates, Ctrl-C aborts: "
			read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
		fi
	else
		echo " "
		echo "No updates available for "$UPDATETARGET".sce or dependency SCEs."
	fi
	cd ..
elif [ -f "$UPDATETARGET".sce ]; then
	if [ -f "$UPDATETARGET".sce.debinx ]; then
		MDNEW=`md5sum /etc/sysconfig/tcedir/import/debinx/NEWDEBINX | cut -f1 -d" "`
		MDOLD=`cat "$UPDATETARGET".sce.debinx`
		if [ "$MDOLD" == "$MDNEW" ]; then
			echo " "
			echo ""$UPDATETARGET".sce is up to date."
			exit 0
		fi
	fi
	echo " "
	echo "Searching for available updates for "$UPDATETARGET".sce."
	echo " "
	unset DEPLIST
	getDeps "$UPDATETARGET"
	for I in `echo "$DEPLIST"`; do
		if grep "^$I$" /tmp/.updatechecked > /dev/null 2>&1; then
			:
		else
			echo " "
			echo "Checkup $I for updates.."
			importupdatecheck "$I" > /dev/null 2>&1
		fi
	done
	if [ -s /tmp/.sceupdatelist ]; then
		if [ "$CHECKONLY" != "TRUE" ]; then
			if [ "$NONINTERACTIVE" == "TRUE" ]; then
				for I in `cat /tmp/.sceupdatelist`; do
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I", exiting.."
						#	exit 1
						#fi
					fi
					echo "$I" >> /tmp/importupdated
				done
			else
				echo " "
				cat  /tmp/.sceupdatelist | sort | uniq
				echo " "
				echo -n "Press Enter to update above SCE(s), y to view package updates, Ctrl-C aborts: "
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
				for I in `cat /tmp/.sceupdatelist`; do
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I", exiting.."
						#	exit 1
						#fi
					fi
					echo "$I" >> /tmp/importupdated
				done
			fi
		else
			echo " "
			cat  /tmp/.sceupdatelist | sort | uniq
			echo -n "The above SCE(s) need to be updated, enter y to view updates, Ctrl-C aborts: "
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
		fi
	else
		echo " "
		echo "No updates available for "$UPDATETARGET".sce or dependency SCEs."
	fi
	
	
elif [ "$SELECT" == "TRUE" ]; then
	ls *.sce | sed 's:.sce$::' | sort > /tmp/.scelistchoose
	echo "quit" >> /tmp/.scelistchoose
	while true; do
		cat /tmp/.scelistchoose | select "Choose SCE(s) to update check, can choose more than one, quit to proceed." "-"
		read ANS < /tmp/select.ans
		if [ "$ANS" == "q" ] || [ "$ANS" == "quit" ]; then
			break
		fi
		grep "^$ANS$" /tmp/.sceupdatechoose > /dev/null 2>&1 || echo "$ANS" >> /tmp/.sceupdatechoose
		sed -i "/^$ANS$/d" /tmp/.scelistchoose
	done
	##
	echo " "
	if [ ! -s /tmp/.sceupdatechoose ]; then
		echo "No SCEs were chosen for update, exiting.."
		exit 0
	fi
	cat /tmp/.sceupdatechoose | tr -d :
	echo " "
	echo -n "Enter (y)es to update check above SCE(s), (n)o to exit: "
	read ANS
	if [ "$ANS" == "y" ] || [ "$ANS" == "Y" ]; then
		## Update selected SCEs
		for D in `cat /tmp/.sceupdatechoose | tr -d :`; do
			echo " "
			echo -n "Checking for updates for "$D".sce.."
			unset DEPLIST
			getDeps "$D"
			for I in `echo "$DEPLIST"`; do
				UPDATETARGET="$I"
				if [ -f "$UPDATETARGET".sce.debinx ]; then
					MDNEW=`md5sum /etc/sysconfig/tcedir/import/debinx/NEWDEBINX | cut -f1 -d" "`
					MDOLD=`cat "$UPDATETARGET".sce.debinx`
					if [ "$MDOLD" == "$MDNEW" ]; then
						echo " "
						echo ""$UPDATETARGET" is up to date."
						echo "$UPDATETARGET" >> /tmp/.updatechecked
						continue
					fi
				fi
				if grep "^$I$" /tmp/.updatechecked > /dev/null 2>&1; then
					:
				else
					echo " "
					echo "Checkup $I for updates.."
					importupdatecheck "$I" > /dev/null 2>&1
				fi
			done
		done
		if [ -s /tmp/.sceupdatelist ]; then
			if [ "$CHECKONLY" != "TRUE" ]; then
				if [ "$NONINTERACTIVE" == "TRUE" ]; then
					for I in `cat /tmp/.sceupdatelist`; do
						if [ -f /tmp/"$I".recommended ]; then
							OPTIONS="$OPTIONS"R
						fi
						if [ -f /tmp/"$I".suggested ]; then
							OPTIONS="$OPTIONS"S
						fi
						if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
							sce-import -"$OPTIONS"np "$I"
							#if [ "$?" != "0" ]; then
							#	echo "Error in updating "$I", exiting.."
							#	exit 1
							#fi
						fi
						echo "$I" >> /tmp/importupdated
					done
				else
					echo " "
					cat  /tmp/.sceupdatelist | sort | uniq
					echo " "
					echo -n "Press Enter to update above SCE(s), y to view package updates, Ctrl-C aborts: "
					read ans
					if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
						less /tmp/updateavailable
					fi
					for I in `cat /tmp/.sceupdatelist`; do
						if [ -f /tmp/"$I".recommended ]; then
							OPTIONS="$OPTIONS"R
						fi
						if [ -f /tmp/"$I".suggested ]; then
							OPTIONS="$OPTIONS"S
						fi
						if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
							sce-import -"$OPTIONS"np "$I"
							#if [ "$?" != "0" ]; then
							#	echo "Error in updating "$I", exiting.."
							#	exit 1
							#fi
						fi
						echo "$I" >> /tmp/importupdated
					done
				fi
			else
				echo " "
				cat  /tmp/.sceupdatelist | sort | uniq
				echo -n "The above SCE(s) need to be updated, enter y to view updates, Ctrl-C aborts: "
					read ans
					if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
						less /tmp/updateavailable
					fi
			fi
		else
			:
		fi
			unset DEPLIST
		if [ ! -s /tmp/.sceupdatelist ]; then
			echo " "
			echo "No updates available for chosen SCEs at this time."
			exit 0
		else
			echo "Do you want to review the list of packages that had updates available?"
			echo -n "Enter (y)es or (n)o to view, then (q)uit to exit reading the package list: "
			read ans
			if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
				less /tmp/updateavailable
			fi			
			exit 0
		fi
	else
		echo "Exit was chosen, no action will be taken."
		cleanup
		exit 0
	fi
else
	echo ""$UPDATETARGET" is not an existing SCE file, exiting.."
fi

cleanup

if ls /tmp/*.pkglist > /dev/null 2>&1; then
	sudo rm /tmp/*.pkglist
fi

if ls /tmp/*.md5new > /dev/null 2>&1; then
	sudo rm /tmp/*.md5new
fi

if ls /tmp/*.deb2sce > /dev/null 2>&1; then
	sudo rm /tmp/*.deb2sce
fi

