#!/bin/sh
# (c) Jason Williams 2014
# Tool to update SCE extensions in bulk.

. /etc/init.d/tc-functions
checknotroot
SCEDIR="/etc/sysconfig/tcedir/sce"
BUILD=`getBuild`
unset DEPLIST
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	echo
	echo "${YELLOW}sce-update - check for updates and update SCE(s).${NORMAL}"
	echo
	echo "Usage:"
	echo
	echo "${YELLOW}'"sce-update"'${NORMAL}      menu prompt, choose SCE(s) to check, update if required."
       	echo "${YELLOW}'"sce-update SCE"'${NORMAL}  check specific SCE for updates, update if required."
	echo "${YELLOW}'"sce-update -a"'${NORMAL}   check all SCEs for updates, both loaded and unloaded,"
        echo "                  update if required."
	echo "${YELLOW}'"sce-update -n"'${NORMAL}   non-interactive mode."
	echo "${YELLOW}'"sce-update -c"'${NORMAL}   menu prompt, check selected SCE(s) for updates,"
        echo "                  no actual updates performed."
	echo "${YELLOW}'"sce-update -r"'${NORMAL}   sce-import unpacks files in RAM during update."
	echo "${YELLOW}'"sce-update -s"'${NORMAL}   sce-import checks for size, available space during update."
	echo "${YELLOW}'"sce-update -z"'${NORMAL}   ignore /etc/sysconfig/sceconfig, use only current"
        echo "                  command line options."
	echo
	exit 0
fi

while getopts canrsz OPTION
do
	case ${OPTION} in
		r) RAM=TRUE ;;
		n) NONINTERACTIVE=TRUE ;;
		c) CHECKONLY=TRUE ;;
		a) UPDATEALL=TRUE ;;
		s) SIZE=TRUE ;;
		z) NOCONFIG=TRUE ;;
                *) echo "Run  sce-update --help  for usage information."
                   exit 1 ;;
	esac
done



# Determine if non-interactive mode is being used.
if grep -i "^NONINTERACTIVE=TRUE" /etc/sysconfig/sceconfig > /dev/null 2>&1 && [ "$NOCONFIG" != "TRUE" ]; then
	NONINTERACTIVE=TRUE
fi

shift `expr $OPTIND - 1`
UPDATETARGET="$1"
OPTIONS=""
if [ "$RAM" == "TRUE" ]; then
	OPTIONS=""$OPTIONS"r"
fi

if [ "$SIZE" == "TRUE" ]; then
	OPTIONS=""$OPTIONS"s"
fi

if [ -z "$1" ]; then
	SELECT=TRUE
fi

[ -d /tmp/work ] && sudo rm -r /tmp/work
[ -f /tmp/.sceupdatechoose ] && sudo rm /tmp/.sceupdatechoose
[ -f /tmp/.scelistchoose ] && sudo rm /tmp/.scelistchoose
[ -f /tmp/.sceupdateall ] && sudo rm /tmp/.sceupdateall
[ -f /tmp/.sceupdatelist ] && sudo rm /tmp/.sceupdatelist
[ -f /tmp/select.ans ] && sudo rm /tmp/select.ans
[ -f /tmp/.importupdates ] && sudo rm /tmp/.importupdates
[ -f /tmp/updateavailable ] && sudo rm /tmp/updateavailable
[ -f /tmp/importupdated ] && sudo rm /tmp/importupdated
[ -f /tmp/.importpkgtype ] && sudo rm /tmp/.importpkgtype
[ -f /tmp/.updatechecked ] && sudo rm /tmp/.updatechecked

cleanup() {
[ -f /tmp/.sceupdatechoose ] && sudo rm /tmp/.sceupdatechoose
[ -f /tmp/.scelistchoose ] && sudo rm /tmp/.scelistchoose
[ -f /tmp/.sceupdateall ] && sudo rm /tmp/.sceupdateall
[ -f /tmp/.sceupdatelist ] && sudo rm /tmp/.sceupdatelist
[ -f /tmp/select.ans ] && sudo rm /tmp/select.ans
[ -f /tmp/.importupdates ] && sudo rm /tmp/.importupdates
[ -f /tmp/PKGADDDEP ] && sudo rm /tmp/PKGADDDEP
[ -f /tmp/PKGDATAFILEMD5SUMLIST ] && sudo rm /tmp/PKGDATAFILEMD5SUMLIST
[ -f /tmp/PKGEXTRAFILES ] && sudo rm /tmp/PKGEXTRAFILES
[ -f /tmp/PKGEXTRAREPODEP ] && sudo rm /tmp/PKGEXTRAREPODEP
[ -f /tmp/PKGPREBUILTDEP ] && sudo rm /tmp/PKGPREBUILTDEP
[ -f /tmp/PREBUILTMD5SUMLIST ] && sudo rm /tmp/PREBUILTMD5SUMLIST
[ -f /tmp/importupdates ] && sudo rm /tmp/importupdates
[ -f /tmp/ssupdates ] && sudo rm /tmp/ssupdates
ls /tmp/*.md5sum > /dev/null 2>&1 && sudo rm /tmp/*.md5sum
[ -f /tmp/.importpkgtype ] && sudo rm /tmp/.importpkgtype
[ -f /tmp/.prebuiltmd5sumlist ] && sudo rm /tmp/.prebuiltmd5sumlist
[ -f /tmp/.pkgextrafilemd5sumlist ] && sudo rm /tmp/.pkgextrafilemd5sumlist
[ -f /tmp/.pkgprebuilt ] && sudo rm /tmp/.pkgprebuilt
[ -f /tmp/.updatechecked ] && sudo rm /tmp/.updatechecked
[ -d /tmp/work ] && sudo rm -r /tmp/work
sudo rm /tmp/*suggested > /dev/null 2>&1
sudo rm /tmp*recommended > /dev/null 2>&1
}

cd /etc/sysconfig/tcedir/sce

exit_tcnet() {
	echo "There is an issue connecting to `cat /opt/tcemirror`, exiting.."
	exit 1
}

updateenv() {
read IMPORTMIRROR < /opt/tcemirror
PREBUILTMIRROR="${IMPORTMIRROR%/}/dCore/"$BUILD"/import"
IMPORTMIRROR="${IMPORTMIRROR%/}/dCore/import"


sudo debGetEnv "$2"
if [ "$?" != "0" ]; then
	echo "Error in updating needed DEBINX files.  Exiting..."
	exit 1
fi
read DEBINX < /tmp/debinx
cd /tmp

[ -f /tmp/deb2sce.tar.gz ] && sudo rm /tmp/deb2sce.tar.gz
/bb/wget -O /tmp/deb2sce.tar.gz -cq "$PREBUILTMIRROR"/deb2sce.tar.gz ||  exit_tcnet
[ -f /tmp/PKGEXCLUDELIST ] || tar xvf /tmp/deb2sce.tar.gz PKGEXCLUDELIST >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGEXTRAREPODEP >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGADDDEP >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGEXTRAFILES >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGPREBUILTDEP >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PKGDATAFILEMD5SUMLIST >/dev/null 2>&1
tar xvf /tmp/deb2sce.tar.gz PREBUILTMD5SUMLIST >/dev/null 2>&1
}

cd /etc/sysconfig/tcedir/import/debinx
if [ ! -f OLDDEBINX ]; then
	updateenv
	sudo cat debinx.* *Packages /tmp/PREBUILTMD5SUMLIST /tmp/PKGDATAFILEMD5SUMLIST /tmp/PKGEXTRAFILEMD5SUMLIST > OLDDEBINX
fi
updateenv
cd /etc/sysconfig/tcedir/import/debinx
sudo cat debinx.* *Packages /tmp/PREBUILTMD5SUMLIST /tmp/PKGDATAFILEMD5SUMLIST /tmp/PKGEXTRAFILEMD5SUMLIST > NEWDEBINX
MDOLD=`md5sum OLDDEBINX | cut -f1 -d" "`
MDNEW=`md5sum NEWDEBINX | cut -f1 -d" "`

if [ "$MDOLD" == "$MDNEW" ]; then
	echo "Your SCEs are up to date."
	sudo rm NEWDEBINX
	sleep 5
	exit 0
else
	echo "Checking for updates of existing SCEs.."
	sudo rm NEWDEBINX
fi
	
cd "$SCEDIR"

## Get recursive list of dependency SCEs.
getDeps() {
DEPLIST=" $1 $DEPLIST "

if [ -f "$SCEDIR"/"$1".sce.dep ]; then
	for E in `cat "$SCEDIR"/"$1".sce.dep`; do 
		H=" $E "
		if echo "$DEPLIST" | grep "$H" > /dev/null 2>&1; then
			continue
		else 
			getDeps "$E"
		fi
	done
fi
}
##

if [ "$UPDATEALL" == "TRUE" ]; then
	echo " "
	echo "Searching for available updates for all existing SCEs."
	## Get list of SCEs to be updated, should be all.
	for I in `ls *.sce | sed 's:.sce$::' | sort`; do 
		echo "$I: Checkup for updates.."
		importupdatecheck "$I" > /dev/null 2>&1
	done
	if [ -s /tmp/.sceupdatelist ]; then
		if [ "$CHECKONLY" != "TRUE" ]; then
			if [ "$NONINTERACTIVE" == "TRUE" ]; then
				for I in `cat /tmp/.sceupdatelist`; do 
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I".  Exiting.."
						#	exit 1
						#fi 
					fi
					echo "$I" >> /tmp/importupdated
				done
			else
				clear
				cat  /tmp/.sceupdatelist | sort | uniq
				echo " "
				echo "The above SCEs are about to be updated.  Press Enter to proceed, y to view package updates, or Ctrl-C to abort.."
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
				for I in `cat /tmp/.sceupdatelist`; do 
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I".  Exiting.."
						#	exit 1
						#fi 
					fi
					echo "$I" >> /tmp/importupdated
				done
			fi
		else
			clear
			cat  /tmp/.sceupdatelist | sort | uniq
			echo "The above SCEs need to be updated.  Press y to view package updates, or Ctrl-C to abort.."
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
		fi
	else
		clear
		echo "No updates available for main or dependency SCEs."
	fi
	##
elif [ -f update/"$UPDATETARGET".sce ]; then
	cd update/
	echo " "
	echo "Searching for available updates for "$UPDATETARGET".sce."
	unset DEPLIST
	getDeps "$UPDATETARGET"
	for I in `echo "$DEPLIST"`; do
		if grep "^$I$" /tmp/.updatechecked > /dev/null 2>&1; then
			:
		else
			echo "$I: Checkup for updates.."
			importupdatecheck "$I" > /dev/null 2>&1
		fi
	done
	if [ -s /tmp/.sceupdatelist ]; then
		if [ "$CHECKONLY" != "TRUE" ]; then
			if [ "$NONINTERACTIVE" == "TRUE" ]; then
				for I in `cat /tmp/.sceupdatelist`; do 
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I".  Exiting.."
						#	exit 1
						#fi 
					fi
					echo "$I" >> /tmp/importupdated
				done
			else
				clear
				cat  /tmp/.sceupdatelist | sort | uniq
				echo " "
				echo "The above SCEs are about to be updated.  Press Enter to proceed, y to view package updates, or Ctrl-C to abort.."
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
				for I in `cat /tmp/.sceupdatelist`; do 
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I".  Exiting.."
						#	exit 1
						#fi 
					fi
					echo "$I" >> /tmp/importupdated
				done
			fi
		else
			clear
			cat  /tmp/.sceupdatelist | sort | uniq
			echo "The above SCEs need to be updated.  Press y to view package updates, or Ctrl-C to abort.."
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
		fi
	else
		clear
		echo "No updates available for main or dependency SCEs."
	fi
	cd ..
elif [ -f "$UPDATETARGET".sce ]; then
	echo " "
	echo "Searching for available updates for "$UPDATETARGET".sce."
	unset DEPLIST
	getDeps "$UPDATETARGET"
	for I in `echo "$DEPLIST"`; do
		if grep "^$I$" /tmp/.updatechecked > /dev/null 2>&1; then
			:
		else
			echo "$I: Checkup for updates.."
			importupdatecheck "$I" > /dev/null 2>&1
		fi
	done
	if [ -s /tmp/.sceupdatelist ]; then
		if [ "$CHECKONLY" != "TRUE" ]; then
			if [ "$NONINTERACTIVE" == "TRUE" ]; then
				for I in `cat /tmp/.sceupdatelist`; do 
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I".  Exiting.."
						#	exit 1
						#fi 
					fi
					echo "$I" >> /tmp/importupdated
				done
			else
				clear
				cat  /tmp/.sceupdatelist | sort | uniq
				echo " "
				echo "The above SCEs are about to be updated.  Press Enter to proceed, y to view package updates, or Ctrl-C to abort.."
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
				for I in `cat /tmp/.sceupdatelist`; do 
					if [ -f /tmp/"$I".recommended ]; then
						OPTIONS="$OPTIONS"R
					fi
					if [ -f /tmp/"$I".suggested ]; then
						OPTIONS="$OPTIONS"S
					fi
					if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
						sce-import -"$OPTIONS"np "$I"
						#if [ "$?" != "0" ]; then
						#	echo "Error in updating "$I".  Exiting.."
						#	exit 1
						#fi 
					fi
					echo "$I" >> /tmp/importupdated
				done
			fi
		else
			clear
			cat  /tmp/.sceupdatelist | sort | uniq
			echo "The above SCEs need to be updated.  Press y to view package updates, or Ctrl-C to abort.."
				read ans
				if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
					less /tmp/updateavailable
				fi
		fi
	else
		clear
		echo "No updates available for main or dependency SCEs."
	fi
	
	
elif [ "$SELECT" == "TRUE" ]; then
	ls *.sce | sed 's:.sce$::' | sort > /tmp/.scelistchoose
	while true; do 
		cat /tmp/.scelistchoose | select "Choose the SCE you want to check for updates . \
You can choose more than one, and enter "q" for quit when you have completed your selection." "-"
		read ANS < /tmp/select.ans
		if [ "$ANS" == "q" ]; then
			break
		fi
		grep "^$ANS$" /tmp/.sceupdatechoose > /dev/null 2>&1 || echo "$ANS" >> /tmp/.sceupdatechoose
		sed -i "/^$ANS$/d" /tmp/.scelistchoose
	done
	##
	clear
	if [ ! -s /tmp/.sceupdatechoose ]; then
		echo "No SCEs were chosen for update.  Exiting.."
		exit 0
	fi
	cat /tmp/.sceupdatechoose | tr -d :
	echo " "
	echo -n "You are about to check for updates to the above SCEs. y to continue, n to exit. (y/N): "
	read ANS
	if [ "$ANS" == "y" ] || [ "$ANS" == "Y" ]; then
		## Update selected SCEs
		for D in `cat /tmp/.sceupdatechoose | tr -d :`; do
			echo " "
			echo "Checking for updates for "$D".sce.."
			unset DEPLIST
			getDeps "$D"
			for I in `echo "$DEPLIST"`; do
				if grep "^$I$" /tmp/.updatechecked > /dev/null 2>&1; then
					:
				else
					echo "$I: Checkup for updates.."
					importupdatecheck "$I" > /dev/null 2>&1
				fi
			done
		done
		if [ -s /tmp/.sceupdatelist ]; then
			if [ "$CHECKONLY" != "TRUE" ]; then
				if [ "$NONINTERACTIVE" == "TRUE" ]; then
					for I in `cat /tmp/.sceupdatelist`; do 
						if [ -f /tmp/"$I".recommended ]; then
							OPTIONS="$OPTIONS"R
						fi
						if [ -f /tmp/"$I".suggested ]; then
							OPTIONS="$OPTIONS"S
						fi
						if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
							sce-import -"$OPTIONS"np "$I"
							#if [ "$?" != "0" ]; then
							#	echo "Error in updating "$I".  Exiting.."
							#	exit 1
							#fi 
						fi 
						echo "$I" >> /tmp/importupdated
					done
				else
					clear
					cat  /tmp/.sceupdatelist | sort | uniq
					echo " "
					echo "The above SCEs are about to be updated.  Press Enter to proceed, y to view package updates, or Ctrl-C to abort.."
					read ans
					if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
						less /tmp/updateavailable
					fi
					for I in `cat /tmp/.sceupdatelist`; do 
						if [ -f /tmp/"$I".recommended ]; then
							OPTIONS="$OPTIONS"R
						fi
						if [ -f /tmp/"$I".suggested ]; then
							OPTIONS="$OPTIONS"S
						fi
						if ! grep "^$I$" /tmp/importupdated > /dev/null 2>&1; then
							sce-import -"$OPTIONS"np "$I"
							#if [ "$?" != "0" ]; then
							#	echo "Error in updating "$I".  Exiting.."
							#	exit 1
							#fi 
						fi
						echo "$I" >> /tmp/importupdated
					done
				fi
			else
				clear
				cat  /tmp/.sceupdatelist | sort | uniq
				echo "The above SCEs need to be updated.  Press y to view package updates, or Ctrl-C to abort.."
					read ans
					if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
						less /tmp/updateavailable
					fi
			fi
		else
			echo "No updates available for main or dependency SCEs."
		fi
			unset DEPLIST
		if [ ! -s /tmp/.sceupdatelist ]; then
			clear
			echo "No updates available for chosen SCEs at this time."
			exit 0
		else
			echo "Do you want to review the list of packages that had updates available?"
			echo -n "Enter y to view and q to exit reading the package list. (y/N): "
			read ans
			if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
				less /tmp/updateavailable
			fi			
			exit 0
		fi
	else
		echo "Exit was chosen, no action will be taken."
		cleanup
		exit 0
	fi
else
	echo ""$UPDATETARGET" is not an existing SCE file.  Exiting.."
fi

cleanup

if ls /tmp/*.pkglist > /dev/null 2>&1; then 
	sudo rm /tmp/*.pkglist
fi

if ls /tmp/*.md5new > /dev/null 2>&1; then 
	sudo rm /tmp/*.md5new
fi

if ls /tmp/*.deb2sce > /dev/null 2>&1; then 
	sudo rm /tmp/*.deb2sce
fi


