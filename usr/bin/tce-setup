#!/bb/ash
#(c) Robert Shingledecker 2009-2011

. /etc/init.d/tc-functions

PATH="/bb:/bin:/sbin:/usr/bin:/usr/sbin"
export PATH

checkroot

read USER < /etc/sysconfig/tcuser
TCEINSTALLED="/usr/local/tce.installed"
if [ ! -f /tmp/.installed ]; then
  touch /tmp/.installed
  chown "$USER":staff /tmp/.installed
fi

process_normal_tcedir() {
	[ -z "$TCE" ] && TCE="$(autoscan 'tce' 'd')"/tce
	if [ "$TCE" != "/tce" ]; then
		TCE_DEVICE="${TCE%%/*}"
		TCE_DIR="${TCE#*/}"
		if [ "$TCE_DEVICE" = "$TCE_DIR" ]; then TCE_DIR="tce"; fi
		find_mountpoint "$TCE_DEVICE"
		if [ -n "$MOUNTPOINT" ]; then
			if [ "$MOUNTED" == "yes" ]; then
				setupExtnDirs
			else
				mount "$MOUNTPOINT"
				if [ $? == 0 ]; then
					UMOUNT="yes"
					setupExtnDirs
				fi
			fi
		fi
	else
	   MOUNTPOINT="/tmp"; TCE_DIR="tce"
	fi

	TCEDIR="$MOUNTPOINT"/"$TCE_DIR"
	if [ ! -d "$TCEDIR"/sce ]; then
		mkdir "$TCEDIR"/sce
		chown -R "$USER".staff "$TCEDIR"
	fi
	[ -L /etc/sysconfig/tcedir ] && rm -f /etc/sysconfig/tcedir
	ln -sf "$TCEDIR" /etc/sysconfig/tcedir
	chown -R "$USER".staff "$TCEINSTALLED"
	sync
	[ "$MOUNTPOINT" == "/tmp" ] && return

# 	Process any .gzs in tce directory before regular extensions.
	if [ "$(ls -A "$TCEDIR"/*.gz 2>/dev/null)" ]; then
		process_gz "$TCEDIR"
	fi
	sync
	
#	Next check for and if found process any sces
	SCEDIR="$TCEDIR"/sce
	SCELIST="$TCEDIR"/"$TARGETLIST"
	if [ -s "$SCELIST" ] && [ "$(ls -A "$SCEDIR"/*.sce 2>/dev/null)" ]; then
		process_sce 
	fi
}

setupExtnDirs() {
	[ -d "$MOUNTPOINT"/"$TCE_DIR"/sce ] || mkdir -p "$MOUNTPOINT"/"$TCE_DIR"/sce
	[ -d "$MOUNTPOINT"/"$TCE_DIR"/ondemand ] || mkdir -p "$MOUNTPOINT"/"$TCE_DIR"/ondemand
	touch "$MOUNTPOINT"/"$TCE_DIR"/sceboot.lst
	chown -R "$USER".staff "$MOUNTPOINT"/"$TCE_DIR" 2>/dev/null
	chmod -R g+w "$MOUNTPOINT"/"$TCE_DIR" 2>/dev/null
}

process_gz() {
	FILELIST=`ls "$1"/*.gz`
	cd /
	for FILE in $FILELIST; do
		zcat "$FILE" | cpio -idmu > /dev/null 2>&1
		GZ="${FILE##*/}"
		STARTSCRIPT="$TCEINSTALLED"/"${GZ%.gz}"
		[ -s "$STARTSCRIPT" ] && sh "$STARTSCRIPT"
	done
	cd -
}
process_sce() {
	while read S
	do
		su "$USER" -c "loadsce -b "$S""
	done < "$SCELIST"
}
process_CD() {
	CD="/mnt/${DEV#/dev/}"
	mount "$CD" 2>/dev/null
	if [ "$?" == 0 ] ; then
		if [ -d "$CD"/cde ]; then
			LOADFROM="$CD"/cde/sce
			CDELIST="$CD"/cde/"$TARGETLIST"
			if [ -s "$CDELIST" ]; then
				while read FILE; do
					FILE="$LOADFROM/$FILE"
					process
				done < "$CDELIST"
				echo "$LOADFROM" > /etc/sysconfig/cde
			fi
		else
			umount "$CD"
		fi
	fi
}

for i in `cat /proc/cmdline`; do
	case $i in
		tce=*) TCE=${i#*=} ;;
		lst=*) TARGETLIST=${i#*=} ;;
	esac
	case $i in
		cde) CDE=1 ;;
		base) ONLYBASE=1 ;;
	esac
done

[ -n "$TARGETLIST" ] || TARGETLIST="sceboot.lst"

# Process any .gzs before attempting to mount tce directory.
# /tmp/builtin support provided for embedding extensions inside the initrd.
if [ "$(ls -A "/tmp/builtin"/*.gz 2>/dev/null)" ]; then
	process_gz "/tmp/builtin"
fi

# Next process regular extensions unless BASE boot option has been specified.

if [ "$1" == "booting" ] && [ -n "$ONLYBASE" ]; then
	echo "${GREEN}Skipping regular Extension loading as requested on the command line.${NORMAL}"
	TCEDIR="/tmp/tce"
	if [ ! -d "$TCEDIR"/sce ]; then
		mkdir "$TCEDIR"/sce
		chown -R "$USER".staff "$TCEDIR"
	fi
else
	process_normal_tcedir
fi

# Finally check for CD Extensions if requested
if [ "$CDE" -a -s /etc/sysconfig/cdroms ]; then
	for DEV in `cat /etc/sysconfig/cdroms`; do
		process_CD
	done 
fi			

# If nothing loaded then also check for pseudo CD, e.g., isohybrid
if [ "$CDE" -a -z "$CDELIST" ]; then
	sleep 5
	DEV="$(autoscan 'cde' 'd')"
	process_CD
fi

# Wrap up by performing updates as may be needed.
if [ -e /etc/sysconfig/newmodules ]; then
	depmod -a 2>/dev/null
	/sbin/udevadm trigger
fi
/sbin/ldconfig 2>/dev/null
if [ -s /tmp/setup.lst ]; then
	for F in `cat /tmp/setup.lst`; do
	APP=`basename "$F"`
		if ! grep "^$APP:" /tmp/.installed >/dev/null; then
			"$F" > /dev/null 2>&1
			echo "$APP:" >> /tmp/.installed
		fi
	 done
	rm -f /tmp/setup.lst
fi

setupHome

