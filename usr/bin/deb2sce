#!/bb/ash
# (c) Robert Shingledecker 2012
# Contributions by Jason Williams
. /etc/init.d/tc-functions

#useBusybox
alias wget='/bb/wget'
alias md5sum='/bb/md5sum'
alias mount='/bb/mount'
> /tmp/.pkglist

TCUSER=`cat /etc/sysconfig/tcuser`
sudo chown "$TCUSER":staff /tmp
sudo chmod 1777 /tmp
checkroot
BUILD=`getBuild`
if [ "$BUILD" == "x86" ]; then
	DEBBUILD="i386"
elif [ "$BUILD" == "armv7" ]; then
	DEBBUILD="armhf"
fi

if [ -f /usr/share/doc/tc/distro.txt ]; then
	DISTRO=`cat /usr/share/doc/tc/distro.txt`
else
	DISTRO=debian
fi

if [ -f /usr/share/doc/tc/repo.txt ]; then
	REPO=`cat /usr/share/doc/tc/repo.txt`
else
	REPO=wheezy
fi

TCEDIR=/etc/sysconfig/tcedir

[ -d /etc/sysconfig/tcedir/import/debinx ] || mkdir -p /etc/sysconfig/tcedir/import/debinx

setupStartupScript() {
	[ -d "$IMPORT"/"$TARGET"/usr/local/tce.installed ] || mkdir -p "$IMPORT"/"$TARGET"/usr/local/tce.installed
	chmod 775 "$IMPORT"/"$TARGET"/usr/local/tce.installed
	chown root.staff "$IMPORT"/"$TARGET"/usr/local/tce.installed
}

## Retrieve the Debian package from the appropriate Debian repo.
fetchDeb() {

		sudo /bb/wget -O "$DEBS"/"$THISDEB"  ${MIRROR}/${1}
		if [ "$?" != 0 ]
		then
			echo "failed on download of $1"
			echo "$1" >> /tmp/import.log
			selectDeb ${1}
		fi
			
}
##

## Bring up a menu if the matching file name of the Debian package is not found in the Debian repo.
selectDeb() {
	FULLPATH=${1}
	SELECT_PATH="${FULLPATH%/*}"
	PKG="${1##*/}"
	/bb/wget -q -O - "$MIRROR"/"$SELECT_PATH" | awk 'BEGIN{FS=" href="}{print $2}' | awk 'BEGIN{FS="\""}{print $2}' | grep "^${PKG%%_*}" | grep ".deb$" | select "Select Package for ${PKG}" "-"
	read DEB < /tmp/select.ans
	if [ "$DEB" != "q" ]
	then
		fetchDeb ${SELECT_PATH}/${DEB}
	fi
}
##

## Functions to get the md5sum of the Debian .deb from the appropriate Packages list.
getMd5sum() {
> /tmp/"$1".pkglist
grep -B 1 -A 15 "^Package: $1$" "$DEBINX" |  grep -B15 "^$" > /tmp/"$1".pkglist
DEBINX=/tmp/"$1".pkglist
getMd5sum1 $1
rm /tmp/"$1".pkglist
}

getMd5sum1() {
	awk -v package="Package: $1" -v build="$DEBBUILD" -v FIELD="$1: "  '
	BEGIN {
		RS=""
		FS="\n"
	}
	{
		if ($1 == package) {
			for (i=2; i <= NF; i++) {
				split($i,f,": ")

				if ( f[1] == "Architecture" ) {
					if ( f[2] == "all" )
						{}
					else if ( f[2] == build )
						{}
					else
						break
					}
				
				if ( f[1] == "MD5sum" )
					print f[2] 
			}
		
		}
		
	} ' < "$DEBINX"
}
##

cleanup() {
	rm -rf /tmp/work
	chmod 1777 /tmp
	chmod 775 /usr/local/tce.installed
	chmod 775 /usr/local/tce.icons 2>/dev/null
	chgrp staff /usr/local/tce.installed
	chgrp staff /usr/local/tce.icons 2>/dev/null
	if ls /tmp/*.debs > /dev/null 2>&1; then 
		sudo rm /tmp/*.debs
	fi
	[ -f /tmp/.sceconflict ] && sudo rm /tmp/.sceconflict
	[ -f /tmp/.scedeps ] && sudo rm /tmp/.scedeps
	[ -f /tmp/.scedebs ] && sudo rm /tmp/.scedebs
	[ -f /tmp/.scelist ] && sudo rm /tmp/.scelist
	[ -f /tmp/.importfree ] && sudo rm /tmp/.importfree
	[ -f /tmp/.pkgexists ] && sudo rm /tmp/.pkgexists
	[ -f /tmp/.importdep ] && sudo rm /tmp/.importdep
	if ls /tmp/*.debdeps > /dev/null 2>&1; then 
		sudo rm /tmp/*.debdeps
	fi	 
	[ -f /tmp/control.tar.gz ] && sudo rm /tmp/control.tar.gz
	[ -f /tmp/data.tar.gz ] && sudo rm /tmp/data.tar.gz
	[ -f /tmp/data.tar.bz2 ] && sudo rm /tmp/data.tar.bz2
	[ -f /tmp/data.tar.xz ] && sudo rm /tmp/data.tar.xz
	#[ -f /tmp/deb2sce.tar.gz ] && sudo rm /tmp/deb2sce.tar.gz
	[ -f /tmp/.prebuiltmd5sumlist ] && sudo rm /tmp/.prebuiltmd5sumlist
	[ -f /tmp/select.ans ] && sudo rm /tmp/select.ans
	#[ -f /tmp/.nogetdeps ] && sudo rm /tmp/.nogetdeps
	[ -f /tmp/.recommends ] && sudo rm /tmp/.recommends
	[ -f /tmp/.suggests ] && sudo rm /tmp/.suggests
	[ -d "$TCEDIR"/import/"$TARGET" ] && sudo rm -r "$TCEDIR"/import/"$TARGET"
}

# Main
unset ONBOOT ONDEMAND FILE
while getopts bo OPTION
do
	case ${OPTION} in
		b) ONBOOT=TRUE ;;
		o) ONDEMAND=TRUE ;;
		*) exit 1 ;;
	esac
done
shift `expr $OPTIND - 1`

if [ -z "$1" ]
then
	echo "you must specify a target."
	exit 1
fi
TARGET="$1"

## Update the DEBINX files
# debGetEnv "$2" || exit 1
read DEBINX < /tmp/debinx
DEBINX="/etc/sysconfig/tcedir/import/debinx/$DEBINX"
read DEBINX_SECURITY < /tmp/debinx_security
DEBINX_SECURITY="/etc/sysconfig/tcedir/import/debinx/$DEBINX_SECURITY"
echo " "
echo " "
echo "Using Package Index:"
echo ""$DEBINX""
echo " "
echo "Using Security Index:"
echo ""$DEBINX_SECURITY""
echo " "
read MIRROR < /opt/debmirror
read MIRROR_SECURITY < /opt/securitymirror
echo "Using "$DISTRO" Mirror: $MIRROR"
echo " "
echo "Using "$DISTRO" Security Mirror: $MIRROR"
echo
unset META

## Remove unused debinx files in TCEDIR that will cause confusion if their /opt/debextra entries do not exist.
if ls "$TCEDIR"/import/debinx/debinx.* > /dev/null 2>&1; then
	for I in `ls "$TCEDIR"/import/debinx/debinx.*`; do 
	H=`basename "$I" | sed 's:debinx.::'`
	if [ ! -f /opt/debextra/"$H" ]; then
		rm "$I"
	fi 
	done
fi
##

## Determine which repo the package will come from.
if [ -s /tmp/.targetfile ]; then
	echo "$TARGET is from your own custom package list:"
	echo "`readlink /tmp/.targetfile`"
	META="$TARGET"

elif sudo grep -q "^$TARGET:" /tmp/PKGADDDEP && ! sudo grep "^Package: $TARGET" "$DEBINX" > /dev/null 2>&1; then
	echo "$TARGET is a meta package of related "$DISTRO" ones."
        echo
	META="$TARGET"
elif sudo grep "^$TARGET:" /tmp/PKGPREBUILTDEP > /dev/null 2>&1; then
	echo "$TARGET is a dCore premade package."
        echo
	META="$TARGET"
elif sudo grep "^Package: $TARGET$" "$TCEDIR"/import/debinx/debinx.* > /dev/null 2>&1; then
	EXTRAINX=`grep -l "^Package: $TARGET$" "$TCEDIR"/import/debinx/debinx.* /dev/null | head -n 1 | cut -f1 -d:`
	MIRRORFILE=`echo "$EXTRAINX" | sed "s:"$TCEDIR"/import/debinx/debinx.::"`
	EXTRAMIRROR=`cat /opt/debextra/"$MIRRORFILE" | awk '{print $1}'`
	EXTRAREPO=`cat /opt/debextra/"$MIRRORFILE" | awk '{print $2}'`
	EXTRAPOOL=`cat /opt/debextra/"$MIRRORFILE" | awk '{print $3}'`
	echo "$TARGET is a "$DISTRO" `echo "$EXTRAREPO"` `echo "$EXTRAPOOL"` package from `echo "$EXTRAMIRROR"`."
        echo
elif sudo grep -q "^Package: $TARGET$" "$DEBINX_SECURITY" > /dev/null 2>&1; then
	echo "$TARGET is a "$DISTRO" "$REPO" security update package from `cat /opt/securitymirror`."
        echo
elif sudo grep -q "^Package: $TARGET$" "$DEBINX" > /dev/null 2>&1; then
	echo "$TARGET is a standard "$DISTRO" "$REPO" package."
        echo
else
	echo "$TARGET is not a standard "$DISTRO", dCore precompiled, or meta package, exiting.."
        echo
	cleanup
	exit 1
fi
##

## Create the directory where the packages will be downloaded to.
> /var/log/sce.log
[ -d "$TCEDIR"/sce ] || mkdir "$TCEDIR"/sce
[ -d "$TCEDIR"/import/debs ] || mkdir -p "$TCEDIR"/import/debs
DEBS="$TCEDIR"/import/debs
##

## Determine if RAM will be used to unpack packages.
if [ -f /tmp/.importram ]; then
	IMPORT=/tmp/import
	mkdir -p "$IMPORT"
	cd "$IMPORT"
else
	IMPORT="$TCEDIR"/import
	cd "$IMPORT"
fi
##

#[ -f exclude.lst ] || gzip -dc /tmp/deb2sce.xlst.gz > exclude.lst

[ -d "$TARGET" ] || mkdir "$TARGET"
cd "$TARGET"
> /tmp/import.log	

## Get the dependencies of the desired packages or list of packages.
if [ -s /tmp/.targetfile ]; then
	echo "Gathering dependency info.."
	echo
	for I in `echo "$TARGET" && cat /tmp/.targetfile`; do 
		debGetDeps "$I" > /dev/null 2>&1
	done &
	/usr/bin/rotdash $!
else
	echo "Gathering dependency info.."
	echo
	debGetDeps "$TARGET" > /dev/null 2>&1 &
	/usr/bin/rotdash $!
fi
##

## Determine if any blocked packages are in the dependency list.
if [ -s /tmp/.blocked ] && [ ! -f /tmp/.importinteractive ]; then
	cat /tmp/.blocked
	echo -n "The above packages are blocked dependencies of $TARGET and will not be included in \
the final SCE. This can cause problems.  Proceed anyway? (y/N): "
	read ans
	if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
		:
	else
		echo "Exiting.."
		cleanup
		exit 1
	fi
fi
##

## Determine if 'Recommended' packages are desired.
if [ -f /tmp/.recommends ]; then
	echo "Gathering Recommended packages info.."
	echo
	if [ -s /tmp/.targetfile ]; then
		for I in `cat /tmp/.targetfile`; do
			debGetRecommends "$I" > /dev/null 2>&1 &
		done 
	else
		debGetRecommends "$1" > /dev/null 2>&1 &
	fi
	/usr/bin/rotdash $!
	if [ -s /tmp/sce.recommends ]; then
		[ -d usr/local/sce/"$TARGET" ] || mkdir -p usr/local/sce/"$TARGET"
		touch usr/local/sce/"$TARGET"/recommends
		echo "Gathering dependency info on Recommended packages.."
		echo
		for I in `cat /tmp/sce.recommends | sort | uniq`; do 
			debGetDeps "$I" > /dev/null 2>&1
		done &
	/usr/bin/rotdash $!
	fi
fi

## Determine if 'Suggested' packages are desired.
if [ -f /tmp/.suggests ]; then
	echo "Gathering Suggested packages info.."
	echo
	if [ -s /tmp/.targetfile ]; then
		for I in `cat /tmp/.targetfile`; do
			debGetSuggests "$I" > /dev/null 2>&1 &
		done 
	else
		debGetSuggests "$1" > /dev/null 2>&1 &
	fi
	/usr/bin/rotdash $!
	if [ -s /tmp/sce.suggests ]; then
		[ -d usr/local/sce/"$TARGET" ] || mkdir -p usr/local/sce/"$TARGET"
		touch usr/local/sce/"$TARGET"/suggests
		echo "Gathering dependency info on Suggested packages.."
		echo
		for I in `cat /tmp/sce.suggests | sort | uniq`; do 
			debGetDeps "$I" > /dev/null 2>&1
		done &
		/usr/bin/rotdash $!
	fi
fi


## Get the SCE deps if any and check for duplicates between deps.
if [ -f /tmp/.importdep ]; then
	if [ -f /etc/sysconfig/tcedir/sce/"$TARGET".sce.dep ]; then
		if [ ! -f /tmp/.importinteractive ]; then
			echo -n "Do you want to use the existing "$TARGET".sce.dep file for dependencies? WARNING:  Answering no will delete "$TARGET".sce.dep now. (y/N):"	
			read ans
			if [ "$ans" == "n" ] || [ "$ans" == "N" ]; then
				sudo rm /etc/sysconfig/tcedir/sce/"$TARGET".sce.dep
				debGetSceDep "$TARGET" || exit 1
			else
				debGetSceDep "$TARGET" || exit 1
			fi
		else
			debGetSceDep "$TARGET" || exit 1
		fi
	else
		debGetSceDep "$TARGET" || exit 1
	fi
	## Copy .dep file to SCE for integrity check ability.
	[ -d usr/local/sce/"$TARGET" ] || mkdir -p usr/local/sce/"$TARGET"
	cp /etc/sysconfig/tcedir/sce/"$TARGET".sce.dep usr/local/sce/"$TARGET"/"$TARGET".dep
	debGetSceDep "$TARGET" || exit 1
	##
fi


if [ -f /tmp/.sceconflict ]; then
	echo "$TARGET already exists in the dep files of the below SCEs.  Aborting to prevent circular dependency."
	echo " "
	cat /tmp/.sceconflict
	cleanup
	exit 1
fi

if [ -f /tmp/.pkgexists ]; then
	echo "$TARGET already exists in below dependency sce's, aborting."
	echo " "
	cat /tmp/.pkgexists
	cleanup
	exit 1
fi
##

## Bring up list of SCEs that will profide package dependencies for the TARGET one.
if [ -f /etc/sysconfig/tcedir/sce/"$TARGET".sce.dep ]; then
	echo
	echo
	echo "The below SCE's in your SCE directory will be used as"
	echo "to provide dependencies for "$TARGET".sce."
	echo
	for FILE in `cat /etc/sysconfig/tcedir/sce/"$TARGET".sce.dep`; do
		if [ -f /etc/sysconfig/tcedir/sce/"$FILE".sce ]; then
			echo "$FILE"
		fi
	done
	echo
	echo
fi
##

## Check free space function when specified.
if [ -f /tmp/.importsize ]; then
	echo "Determining HD and RAM space needed.."
	debGetSize "$TARGET" &
	/usr/bin/rotdash $!
fi
##

## Echo when not enough free space in RAM or chosen working partition.
if [ -s /tmp/.importfree ]; then
	cat /tmp/.importfree
	echo "The above errors have occured. Do you wish to continue"
	echo -n "importing "$TARGET" despite the warnings? (y/N):"
	read ans
	if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
		:
	else
		echo "Exiting.."
		cleanup
		exit 1
	fi
fi
##

## Include in TARGET SCE  only package deps of TARGET that are not provided by chosen dependency SCEs
for I in `ls /tmp/work/`; do grep "^$I$" /tmp/.scedebs > /dev/null 2>&1 || echo "$I" >> /tmp/.pkglist; done
##

## Function to provide a "less" list of packages that will be imported.
if [ -f /tmp/.viewpkgs ]; then
	echo "Do you want to review the list of packages that $TARGET.sce"
	echo "will consist of? Enter y to view and q to exit reading"
	echo -n "the package list. (y/N): "
	read ans
	if [ "$ans" == "y" ] || [ "$ans" == "Y" ]; then
		less /tmp/.pkglist
	fi
	echo
	echo
	echo  "Proceeding to create $TARGET.sce.."
fi
##

[ -d usr/local/sce/"$TARGET" ] || mkdir -p usr/local/sce/"$TARGET"

## Copy list file to SCE for integrity check ability.
if [ -f /tmp/.targetfile ]; then
		cp /tmp/.targetfile usr/local/sce/"$TARGET"/"$TARGET".lst
fi
##


HERE=`pwd`
for DEBINFO in `ls -t /tmp/work`; do
	 if [ -f /tmp/.scedebs ]; then
	 	grep "^$DEBINFO$" /tmp/.scedebs > /dev/null 2>&1 && continue
	 fi 
	 read FULLPATH < /tmp/work/"$DEBINFO"
	 read IMPORTMIRROR < /opt/tcemirror                                                                             
	 PREBUILTMIRROR="${IMPORTMIRROR%/}/dCore/"$BUILD"/import"
	 IMPORTMIRROR="${IMPORTMIRROR%/}/dCore/import"
	 ## Check to see if package is PREBUILT first.
	 if grep "^${DEBINFO}:" /tmp/PKGPREBUILTDEP >/dev/null && ! grep "^Package: $DEBINFO$" "$TCEDIR"/import/debinx/debinx.* > /dev/null 2>&1 ; then
	 #if [ -z "$FULLPATH" ] && grep "^${DEBINFO}:" /tmp/PKGPREBUILTDEP >/dev/null; then
		if grep "^$DEBINFO": /tmp/PREBUILTMD5SUMLIST > /dev/null 2>&1; then
			cd "$DEBS"
			if [ -f "${DEBINFO}".tar.gz ]; then
				if [ `/bb/md5sum "${DEBINFO}".tar.gz | cut -f1 -d" "` != `grep "^$DEBINFO": /tmp/PREBUILTMD5SUMLIST | cut -f2 -d" "` ]; then
					echo "Fetching updated "${DEBINFO}".tar.gz.."
					rm "${DEBINFO}".tar.gz*
					/bb/wget -O "${DEBINFO}".tar.gz "$PREBUILTMIRROR"/"${DEBINFO}".tar.gz 
					if [ "$?" != 0 ]
					then
						echo "failed on download of "${DEBINFO}".tar.gz"
						cleanup
						exit 1
					fi
				fi
				
			else
				/bb/wget -O "${DEBINFO}".tar.gz "$PREBUILTMIRROR"/"${DEBINFO}".tar.gz 
				if [ "$?" != 0 ]
				then
					echo "failed on download of "${DEBINFO}".tar.gz"
					cleanup
					exit 1
				fi
			fi

			if ! grep "^$DEBINFO": /tmp/PREBUILTMD5SUMLIST > /dev/null 2>&1; then
				echo ""$DEBINFO" is missing from the prebuilt md5sum list.  Exiting.."
				cleanup
				exit 1
			fi 
	
			if [ -f "${DEBINFO}".tar.gz ] && [ `/bb/md5sum "${DEBINFO}".tar.gz | cut -f1 -d" "` == `grep "^$DEBINFO": /tmp/PREBUILTMD5SUMLIST | cut -f2 -d" "` ]; then	 
				echo "${DEBINFO}: `/bb/md5sum "${DEBINFO}".tar.gz | cut -f1 -d" "`" >> "$IMPORT"/"$TARGET"/usr/local/sce/"$TARGET"/"$TARGET".md5sum		  
				echo "Merging "${DEBINFO}":"
	    	   		tar xf "${DEBINFO}".tar.gz -C "$IMPORT"/"$TARGET" 
				if [ "$?" != 0 ]
				then
					echo "failed merging of "${DEBINFO}".tar.gz"
					echo "${DEBINFO}".tar.gz  >> /tmp/import.log
				fi  
				echo		  
			else 
				echo "md5sum failed for "${DEBINFO}".tar.gz, exiting.."
				cleanup
				exit 1
			fi
			cd "$IMPORT"/"$TARGET"
		fi	
	 elif [ "$FULLPATH" != "" ]; then
	 	THISDEB="${FULLPATH##*/}"
		## Check second to see if package is from extra repo.
		if grep "^Package: $DEBINFO$" "$TCEDIR"/import/debinx/debinx.* > /dev/null 2>&1 ; then
			DEBINX=`grep "^Package: $DEBINFO$" "$TCEDIR"/import/debinx/debinx* /dev/null | head -n 1 | cut -f1 -d:`
			MIRRORFILE=`echo "$DEBINX" | sed "s:"$TCEDIR"/import/debinx/debinx.::"`
			MIRROR=`cat /opt/debextra/"$MIRRORFILE" | cut -f1 -d" "`
			MD5NEW=$(getMd5sum1 "$DEBINFO")
			if [ -f "$DEBS"/"$THISDEB" ]; then
				MD5OLD=$(/bb/md5sum "$DEBS"/"$THISDEB" | cut -f1 -d" ")
				if [ "$MD5NEW" != "$MD5OLD" ]; then
					rm "$DEBS"/"$THISDEB"
					echo "Fetching updated "$THISDEB".."
					fetchDeb "$FULLPATH"
				fi
			else
				fetchDeb "$FULLPATH"
			fi
			sudo debExtract "$DEBS"/"$THISDEB" "$TARGET"
			if [ "$?" != "0" ]; then
				echo "Failure to extract "$THISDEB", exiting.."
				cleanup
				exit 1
			fi		
			echo ""$DEBINFO":  "$MD5NEW"" >> "$IMPORT"/"$TARGET"/usr/local/sce/"$TARGET"/"$TARGET".md5sum
			read DEBINX < /tmp/debinx
			DEBINX="/etc/sysconfig/tcedir/import/debinx/$DEBINX"	
			read MIRROR < /opt/debmirror
		## Third check to see if package is available as security update.
		elif sudo grep "^Package: $DEBINFO$" "$DEBINX_SECURITY" > /dev/null 2>&1 ; then
			DEBINX="$DEBINX_SECURITY"
			read MIRROR < /opt/securitymirror
			MD5NEW=$(getMd5sum "$DEBINFO")
			if [ -f "$DEBS"/"$THISDEB" ]; then
				MD5OLD=$(/bb/md5sum "$DEBS"/"$THISDEB" | cut -f1 -d" ")
				if [ "$MD5NEW" != "$MD5OLD" ]; then
					rm "$DEBS"/"$THISDEB"
					echo "Fetching updated "$THISDEB".."
					fetchDeb "$FULLPATH"
				fi
			else
				fetchDeb "$FULLPATH"
			fi
			sudo debExtract "$DEBS"/"$THISDEB" "$TARGET"
			if [ "$?" != "0" ]; then
				echo "Failure to extract "$THISDEB", exiting.."
				cleanup
				exit 1
			fi
		
			echo ""$DEBINFO":  "$MD5NEW"" >> "$IMPORT"/"$TARGET"/usr/local/sce/"$TARGET"/"$TARGET".md5sum
			read DEBINX < /tmp/debinx
			DEBINX="/etc/sysconfig/tcedir/import/debinx/$DEBINX"	
			read MIRROR < /opt/debmirror
		else 
			## Fourth package is standard Debian repo one.
			read DEBINX < /tmp/debinx
			DEBINX="/etc/sysconfig/tcedir/import/debinx/$DEBINX"	
			read MIRROR < /opt/debmirror
			MD5NEW=$(getMd5sum "$DEBINFO")
			if [ -f "$DEBS"/"$THISDEB" ]; then
				MD5OLD=$(/bb/md5sum "$DEBS"/"$THISDEB" | cut -f1 -d" ")
				if [ "$MD5NEW" != "$MD5OLD" ]; then
					rm "$DEBS"/"$THISDEB"
					echo "Fetching updated "$THISDEB".."
					fetchDeb "$FULLPATH"
				fi
			else
				fetchDeb "$FULLPATH"
			fi
			sudo debExtract "$DEBS"/"$THISDEB" "$TARGET"
			if [ "$?" != "0" ]; then
				echo "Failure to extract "$THISDEB", exiting.."
				cleanup
				exit 1
			fi
		
			echo ""$DEBINFO":  "$MD5NEW"" >> "$IMPORT"/"$TARGET"/usr/local/sce/"$TARGET"/"$TARGET".md5sum
			read DEBINX < /tmp/debinx
			DEBINX="/etc/sysconfig/tcedir/import/debinx/$DEBINX"	
			read MIRROR < /opt/debmirror
		fi	
	 fi
done



cd ..
## Move *.debs package listing to the SCE.
mv /tmp/*.debs "$IMPORT"/"$TARGET"/usr/local/sce/"$TARGET"/ > /dev/null 2>&1
if [ -f /tmp/"$TARGET".debdeps ]; then
	cp /tmp/"$TARGET".debdeps "$IMPORT"/"$TARGET"/usr/local/sce/"$TARGET"/
fi
##
[ -d "$TARGET"/usr/share/menu ] && rm -r "$TARGET"/usr/share/menu
[ -d "$TARGET"/usr/share/lintian ] && rm -r "$TARGET"/usr/share/lintian

## Remove empty dirs.
busybox find "$TARGET" -mindepth 1 -depth -type d -exec rmdir '{}' + 2>/dev/null

sed -i "s:APPNAME:$TARGET:g" "$TARGET"/usr/local/tce.installed/* > /dev/null 2>&1
if [ -f "$TCEDIR"/sce/"$TARGET".sce ] && busybox mount | grep " /tmp/tcloop/"$TARGET" " > /dev/null 2>&1; then
	[ -d "$TCEDIR"/sce/update ] || mkdir -p "$TCEDIR"/sce/update
	mksquashfs "$TARGET" "$TCEDIR"/sce/update/"$TARGET".sce -noappend
	if [ "$?" == "0" ]; then
		sudo rm -rf "$TARGET"
		cd "$TCEDIR"/sce/update/
		/bb/md5sum "$TARGET".sce > "$TARGET".sce.md5.txt	
		MD5SUMDEBINX=`md5sum "$TCEDIR"/import/debinx/NEWDEBINX | cut -f1 -d" "`
		echo "$MD5SUMDEBINX" > "$TARGET".sce.debinx
		cd "$IMPORT"
		if [ "$ONBOOT" ]; then
			if ! grep -wq "$TARGET" "$TCEDIR"/sceboot.lst
			then
				echo "$TARGET" >> "$TCEDIR"/sceboot.lst
			fi
		fi
		[ "$ONDEMAND" ] && su "$TCUSER" -c "ondemand "$TARGET""
		if [ -s /tmp/.targetfile ]; then
			cat /tmp/.targetfile > "$TCEDIR"/sce/"$TARGET".sce.lst
		fi
		echo "Done."
	else
		echo "Error creating "$TARGET".sce.  Exiting.." 
		exit 1
	fi
else
	mksquashfs "$TARGET" "$TCEDIR"/sce/"$TARGET".sce -noappend
	if [ "$?" == "0" ]; then
		cd "$TCEDIR"/sce/
		/bb/md5sum "$TARGET".sce > "$TARGET".sce.md5.txt
		MD5SUMDEBINX=`md5sum "$TCEDIR"/import/debinx/NEWDEBINX | cut -f1 -d" "`
		echo "$MD5SUMDEBINX" > "$TARGET".sce.debinx	
		cd "$IMPORT"
		if [ "$ONBOOT" ]; then
			if ! grep -wq "$TARGET" "$TCEDIR"/sceboot.lst
			then
				echo "$TARGET" >> "$TCEDIR"/sceboot.lst
			fi
		fi
		[ "$ONDEMAND" ] && su "$TCUSER" -c "ondemand "$TARGET""
		if [ -s /tmp/.targetfile ]; then
			cat /tmp/.targetfile > "$TCEDIR"/sce/"$TARGET".sce.lst
		fi
		echo
		echo "Finished importing "$TARGET".sce."
                echo
	else
		echo "Error creating "$TARGET".sce.  Exiting.." 
		exit 1
	fi
fi

cleanup
